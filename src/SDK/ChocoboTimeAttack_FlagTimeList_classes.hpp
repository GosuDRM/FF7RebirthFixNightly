#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChocoboTimeAttack_FlagTimeList

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ChocoboTimeAttack_FlagTimeList.ChocoboTimeAttack_FlagTimeList_C
// 0x0060 (0x0428 - 0x03C8)
class UChocoboTimeAttack_FlagTimeList_C final : public UEndUserWidget
{
public:
	class UChocoboTimeAttack_FlagTime_C*          FlagTime_10;                                       // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_FlagTime_C*          FlagTime_11;                                       // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_FlagTime_C*          FlagTime_12;                                       // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_FlagTime_C*          FlagTime_01;                                       // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_FlagTime_C*          FlagTime_02;                                       // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_FlagTime_C*          FlagTime_03;                                       // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_FlagTime_C*          FlagTime_04;                                       // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_FlagTime_C*          FlagTime_05;                                       // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_FlagTime_C*          FlagTime_06;                                       // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_FlagTime_C*          FlagTime_07;                                       // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_FlagTime_C*          FlagTime_08;                                       // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_FlagTime_C*          FlagTime_09;                                       // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ChocoboTimeAttack_FlagTimeList_C">();
	}
	static class UChocoboTimeAttack_FlagTimeList_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChocoboTimeAttack_FlagTimeList_C>();
	}
};
static_assert(alignof(UChocoboTimeAttack_FlagTimeList_C) == 0x000008, "Wrong alignment on UChocoboTimeAttack_FlagTimeList_C");
static_assert(sizeof(UChocoboTimeAttack_FlagTimeList_C) == 0x000428, "Wrong size on UChocoboTimeAttack_FlagTimeList_C");
static_assert(offsetof(UChocoboTimeAttack_FlagTimeList_C, FlagTime_10) == 0x0003C8, "Member 'UChocoboTimeAttack_FlagTimeList_C::FlagTime_10' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_FlagTimeList_C, FlagTime_11) == 0x0003D0, "Member 'UChocoboTimeAttack_FlagTimeList_C::FlagTime_11' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_FlagTimeList_C, FlagTime_12) == 0x0003D8, "Member 'UChocoboTimeAttack_FlagTimeList_C::FlagTime_12' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_FlagTimeList_C, FlagTime_01) == 0x0003E0, "Member 'UChocoboTimeAttack_FlagTimeList_C::FlagTime_01' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_FlagTimeList_C, FlagTime_02) == 0x0003E8, "Member 'UChocoboTimeAttack_FlagTimeList_C::FlagTime_02' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_FlagTimeList_C, FlagTime_03) == 0x0003F0, "Member 'UChocoboTimeAttack_FlagTimeList_C::FlagTime_03' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_FlagTimeList_C, FlagTime_04) == 0x0003F8, "Member 'UChocoboTimeAttack_FlagTimeList_C::FlagTime_04' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_FlagTimeList_C, FlagTime_05) == 0x000400, "Member 'UChocoboTimeAttack_FlagTimeList_C::FlagTime_05' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_FlagTimeList_C, FlagTime_06) == 0x000408, "Member 'UChocoboTimeAttack_FlagTimeList_C::FlagTime_06' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_FlagTimeList_C, FlagTime_07) == 0x000410, "Member 'UChocoboTimeAttack_FlagTimeList_C::FlagTime_07' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_FlagTimeList_C, FlagTime_08) == 0x000418, "Member 'UChocoboTimeAttack_FlagTimeList_C::FlagTime_08' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_FlagTimeList_C, FlagTime_09) == 0x000420, "Member 'UChocoboTimeAttack_FlagTimeList_C::FlagTime_09' has a wrong offset!");

}

