#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EB0016_00_Rufus_Standard_AIBP

#include "Basic.hpp"

#include "EndDataBase_structs.hpp"
#include "Engine_structs.hpp"
#include "EB_Base_AIBP_classes.hpp"
#include "EndGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass EB0016_00_Rufus_Standard_AIBP.EB0016_00_Rufus_Standard_AIBP_C
// 0x0200 (0x1270 - 0x1070)
class AEB0016_00_Rufus_Standard_AIBP_C final : public AEB_Base_AIBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_EB0016_00_Rufus_Standard_AIBP_C;    // 0x1068(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	int32                                         Bullet;                                            // 0x1070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Bullet_MAX;                                        // 0x1074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Parry_ShotPose;                                    // 0x1078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DisableCounter;                                    // 0x1079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_107A[0x2];                                     // 0x107A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   damageHitReactionID;                               // 0x107C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableReaction;                                   // 0x1084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NormalArmor;                                       // 0x1085(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          JudgeGuard;                                        // 0x1086(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1087[0x1];                                     // 0x1087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ExtraConditionTag;                                 // 0x1088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TopPriorityActionId;                               // 0x1090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          JudgeHit;                                          // 0x1098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          justGuard;                                         // 0x1099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ChanceTime;                                        // 0x109A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AddChanceTime;                                     // 0x109B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ChanceTime_VeryShort;                              // 0x109C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChanceTime_Short;                                  // 0x10A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChanceTime_Long;                                   // 0x10A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           PCAbility_ImmediateBurst;                          // 0x10A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Guard;                                             // 0x10B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10B9[0x7];                                     // 0x10B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PCAbility_ChanceTime_Short;                        // 0x10C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           CannotReactMot;                                    // 0x10D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         _Hard_ChanceTime_Minimum;                          // 0x10E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_Short;                                    // 0x10E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_Middle;                                   // 0x10E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_Long;                                     // 0x10EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_Far;                                      // 0x10F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         _Debug_GeneralCount;                               // 0x10F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BackflipShot;                                      // 0x10F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10F9[0x7];                                     // 0x10F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          DarkNation;                                        // 0x1100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BackStepShot;                                      // 0x1108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DLink;                                             // 0x1109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DLink_First;                                       // 0x110A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_110B[0x5];                                     // 0x110B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Pursuit_DNAction;                                  // 0x1110(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Standby;                                           // 0x1120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1121[0x3];                                     // 0x1121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinkEnableDistance_DN;                             // 0x1124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LinkEnableDistance_Cloud;                          // 0x1128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Standby_Around;                                    // 0x112C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_112D[0x3];                                     // 0x112D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance_Pursuit_Short;                            // 0x1130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_Pursuit_Long;                             // 0x1134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Combination;                                       // 0x1138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Combination_RFActionEnd;                           // 0x1139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Combination_FIX;                                   // 0x113A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ForceCombination;                                  // 0x113B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Rufus_Vanguard;                                    // 0x113C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_113D[0x3];                                     // 0x113D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FastMoveMotion;                                    // 0x1140(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DN_DLinkStandby;                                   // 0x1150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AfterBurst;                                        // 0x1151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1152[0x6];                                     // 0x1152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DmgSource_NoReaction_Normal;                       // 0x1158(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           DmgSource_NoReaction_HEAT;                         // 0x1168(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   CombinationId;                                     // 0x1178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HandleId;                                          // 0x1180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1184[0x4];                                     // 0x1184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          CauserChara;                                       // 0x1188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitCount_DodgeAtkPC;                               // 0x1190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitCount_DodgeAtk3PC;                              // 0x1194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitCount_LongPressAtkPC;                           // 0x1198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitCount_LongPressAirAtkPC;                        // 0x119C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitCount_AirAtk3PC;                                // 0x11A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitCount_AirJChangePC;                             // 0x11A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AtkCount_SAtkFirstPC;                              // 0x11A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AtkCount_SAtkLoopPC;                               // 0x11AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           DmgSource_ImmidiateGuard;                          // 0x11B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ExtraInterval_FireBreak;                           // 0x11C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C4[0x4];                                     // 0x11C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DmgSource_Cut50;                                   // 0x11C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           ToComboReloadAbility_Tonfa;                        // 0x11D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           ToComboReloadAbility_NormalShot;                   // 0x11E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           ToComboReloadAbility_LaserCoin;                    // 0x11F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           ToComboReloadAbility_Squat;                        // 0x1208(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         HeatTime_UntilCounter;                             // 0x1218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HEAT_EndSurpassTime;                               // 0x121C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FastParry;                                         // 0x121D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121E[0x2];                                     // 0x121E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ToBackStepShotCombo;                               // 0x1220(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           SyncID_SurpassCounter;                             // 0x1230(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         BPBonus_Parry;                                     // 0x1240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1244[0x4];                                     // 0x1244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Ability_FastCounter;                               // 0x1248(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AtkCount_SAtkFinishPC;                             // 0x1258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GroundHeight;                                      // 0x125C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightThreshold;                                   // 0x1260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DN_Dead;                                           // 0x1264(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ChainShot;                                         // 0x1265(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void InpActEvt_Insert_K2Node_InputKeyEvent_20(const struct FKey& Key);
	void InpActEvt_Z_K2Node_InputKeyEvent_19(const struct FKey& Key);
	void InpActEvt_X_K2Node_InputKeyEvent_18(const struct FKey& Key);
	void InpActEvt_C_K2Node_InputKeyEvent_17(const struct FKey& Key);
	void InpActEvt_Y_K2Node_InputKeyEvent_16(const struct FKey& Key);
	void InpActEvt_U_K2Node_InputKeyEvent_15(const struct FKey& Key);
	void InpActEvt_LeftShift_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void InpActEvt_BackSpace_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void InpActEvt_Zero_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_F_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_G_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_H_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_Up_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_Down_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_V_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_I_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_Left_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_B_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_O_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_P_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_RightControl_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void OnTakeDamageInvoke(int32 Damage, class AEndCharacter* InChara, class FName InName, EEndBattleAbilityCommandType InCommandType, bool InBind, bool InGuard, class FName InBoneName, bool InAttributeWeak, class FName InDmgSrcID, EEndBattleAttributeType appendAttribute, float justHitRotYaw, const struct FVector& hitPosition, bool InHeal, bool InCounter, const struct FEndDataObjectBattleDamageSourceAccessor& dataObjectBattleDamageSource, bool useAbilityUCPC, const struct FEndDataObjectBattleAbilityAccessor& dataObjectBattleAbility);
	void OnGiveDamageInvoke(int32 Damage, class AEndCharacter* InTarget, class FName InName, bool InBind, bool InGuard, bool KeepOver, bool InCounter, class FName InBoneName, bool InAttributeWeak, class FName InDamageSourceID, bool InSteal, bool heal, bool kill, bool justGuard_0, bool bLock);
	void OnMotionStateMessageEnd(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnTakeDamageHPFirstInvoke(class AEndCharacter* causerCharacter, class FName AbilityId, bool attributeWeak, EEndBattleAbilityCommandType AbilityCommandType, const struct FEndDataObjectBattleAbilityAccessor& dataObjectBattleAbility);
	void OnMotionStateMessageBegin(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue, float InTotalDuration);
	void OnPreTakeDamage(float justHitRotYaw, class AEndCharacter* ownerCharacter, class FName InName, class FName hitBoneName, class FName DamageSourceID, const struct FVector& hitPosition, int32 Damage, bool InGuard, EEndBattleAttributeType appendAttribute, const struct FEndDataObjectBattleDamageSourceAccessor& dataObjectBattleDamageSource, bool heal);
	void OnGroupMessageInvoke(const struct FEndAIBattleGroupNotifyInfo& NotifyInfo);
	void OnAICombinationInvoke(EEndAIEnemyCombinationNotify NotifyType, class FName CombinationId_0, int32 Count);
	void OnEndAICombinationInvoke(class FName CombinationId_0);
	void OnExtraConditionInvoke(class FName ConditionTag);
	void OnReactionSensingInvoke(class AEndCharacter* CauserChara_0, int32 HandleId_0, EEndBattleReactionNotificationType NotificationType, EEndBattleAttackDirectionType AttackDirectionType);
	void OnReactionSensingTakeAbilityInvoke(class AEndCharacter* CauserChara_0, int32 HandleId_0);
	void OnDefenseGuard(class FName battleDefenseID, EEndBattleDefenseGuardType defenseGuardType, bool executeTiming, class AEndCharacter* attackedCharacter, const struct FEndDataObjectBattleAbilityAccessor& attackedDataObjectBattleAbility, const class FName& attackedDamageSourceID);
	void OnAbilityReactionCondition(EEndBattleAbilityReactionConditionType abilityReactionConditionType);
	void OnFastDashArrivalInvoke_EB0016(class FName Tag, bool bSuccessAction);
	void クラウドと正対();
	void Dリンク解除();
	void OnMotionMessageInvoke(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnActionInterruptInvoke(class FName ActionTag);
	void OnStartActionDefinitionInvoke(class FName ActionDefTag);
	void OnEndActionDefinitionInvoke(class FName ActionDefTag, class FName SuspendAbilityId, bool bSuspendSummonCutScene);
	void OnAITimerInvoke(class FName ID);
	void OnEndAbilityInvoke(class FName AbilityId, bool createdDamageSource, bool suspended, bool suspendedSummonCutScene);
	void OnBeginBreak(class AEndCharacter* causerCharacter);
	void OnDefinitionLockTargetInvoke(class FName LockTargetTag);
	void OnBeginBurst();
	void OnEndBreak();
	void OnEndBurst(bool instant);
	void OnChangeSyncActionState(const class FName& SyncActionID, EEndBattleSyncActionStateType StateType, class AEndCharacter* targetChara, const class FName& DetachDamageSourceID);
	void OnNotificationDefinitionComboInvoke(class FName ComboDefTag, class FName ActionDefTag);
	void OnUseAbilityInvoke(class FName AbilityId);
	void OnSummonCutSceneBegin();
	void OnStartBattleInvoke();
	void OnEndBattleInvoke();
	void ReceiveTick(float DeltaSeconds);
	void OnProwlInvoke(EEndAIProwlCallType CallType);
	void OnActionInvoke(EEndAIIntervalType IntervalType, class FName ExtraIntervalId);
	void OnActionTopPriorityInvoke(class FName TopPriorityActionId_0);
	void AsyncCheckConditionInvoke();
	void OnChangePhaseFinishInvoke(int32 PrevPhase, int32 NextPhase);
	void OnChangePhaseReadyInvoke(int32 PrevPhase, int32 NextPhase);
	void ExecuteUbergraph_EB0016_00_Rufus_Standard_AIBP(int32 EntryPoint);
	void OverrideDamageHitReactionID(class FName AbilityId, const struct FEndDataObjectBattleAbilityAccessor& dataObjectBattleAbility, class FName DamageSourceID, bool abilityFirstHit, class AEndCharacter* causerCharacter, class FName* damageHitReactionID_0);
	void InpActEvt_A_K2Node_InputKeyEvent_29(const struct FKey& Key);
	void InpActEvt_Q_K2Node_InputKeyEvent_28(const struct FKey& Key);
	void InpActEvt_W_K2Node_InputKeyEvent_27(const struct FKey& Key);
	void InpActEvt_S_K2Node_InputKeyEvent_26(const struct FKey& Key);
	void InpActEvt_D_K2Node_InputKeyEvent_25(const struct FKey& Key);
	void InpActEvt_E_K2Node_InputKeyEvent_24(const struct FKey& Key);
	void InpActEvt_R_K2Node_InputKeyEvent_23(const struct FKey& Key);
	void InpActEvt_T_K2Node_InputKeyEvent_22(const struct FKey& Key);
	void InpActEvt_LeftControl_K2Node_InputKeyEvent_21(const struct FKey& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EB0016_00_Rufus_Standard_AIBP_C">();
	}
	static class AEB0016_00_Rufus_Standard_AIBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEB0016_00_Rufus_Standard_AIBP_C>();
	}
};
static_assert(alignof(AEB0016_00_Rufus_Standard_AIBP_C) == 0x000010, "Wrong alignment on AEB0016_00_Rufus_Standard_AIBP_C");
static_assert(sizeof(AEB0016_00_Rufus_Standard_AIBP_C) == 0x001270, "Wrong size on AEB0016_00_Rufus_Standard_AIBP_C");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, UberGraphFrame_EB0016_00_Rufus_Standard_AIBP_C) == 0x001068, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::UberGraphFrame_EB0016_00_Rufus_Standard_AIBP_C' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Bullet) == 0x001070, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Bullet' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Bullet_MAX) == 0x001074, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Bullet_MAX' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Parry_ShotPose) == 0x001078, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Parry_ShotPose' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, DisableCounter) == 0x001079, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::DisableCounter' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, damageHitReactionID) == 0x00107C, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::damageHitReactionID' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, DisableReaction) == 0x001084, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::DisableReaction' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, NormalArmor) == 0x001085, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::NormalArmor' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, JudgeGuard) == 0x001086, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::JudgeGuard' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, ExtraConditionTag) == 0x001088, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::ExtraConditionTag' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, TopPriorityActionId) == 0x001090, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::TopPriorityActionId' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, JudgeHit) == 0x001098, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::JudgeHit' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, justGuard) == 0x001099, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::justGuard' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, ChanceTime) == 0x00109A, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::ChanceTime' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, AddChanceTime) == 0x00109B, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::AddChanceTime' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, ChanceTime_VeryShort) == 0x00109C, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::ChanceTime_VeryShort' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, ChanceTime_Short) == 0x0010A0, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::ChanceTime_Short' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, ChanceTime_Long) == 0x0010A4, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::ChanceTime_Long' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, PCAbility_ImmediateBurst) == 0x0010A8, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::PCAbility_ImmediateBurst' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Guard) == 0x0010B8, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Guard' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, PCAbility_ChanceTime_Short) == 0x0010C0, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::PCAbility_ChanceTime_Short' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, CannotReactMot) == 0x0010D0, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::CannotReactMot' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, _Hard_ChanceTime_Minimum) == 0x0010E0, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::_Hard_ChanceTime_Minimum' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Distance_Short) == 0x0010E4, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Distance_Short' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Distance_Middle) == 0x0010E8, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Distance_Middle' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Distance_Long) == 0x0010EC, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Distance_Long' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Distance_Far) == 0x0010F0, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Distance_Far' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, _Debug_GeneralCount) == 0x0010F4, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::_Debug_GeneralCount' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, BackflipShot) == 0x0010F8, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::BackflipShot' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, DarkNation) == 0x001100, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::DarkNation' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, BackStepShot) == 0x001108, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::BackStepShot' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, DLink) == 0x001109, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::DLink' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, DLink_First) == 0x00110A, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::DLink_First' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Pursuit_DNAction) == 0x001110, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Pursuit_DNAction' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Standby) == 0x001120, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Standby' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, LinkEnableDistance_DN) == 0x001124, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::LinkEnableDistance_DN' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, LinkEnableDistance_Cloud) == 0x001128, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::LinkEnableDistance_Cloud' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Standby_Around) == 0x00112C, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Standby_Around' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Distance_Pursuit_Short) == 0x001130, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Distance_Pursuit_Short' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Distance_Pursuit_Long) == 0x001134, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Distance_Pursuit_Long' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Combination) == 0x001138, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Combination' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Combination_RFActionEnd) == 0x001139, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Combination_RFActionEnd' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Combination_FIX) == 0x00113A, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Combination_FIX' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, ForceCombination) == 0x00113B, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::ForceCombination' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Rufus_Vanguard) == 0x00113C, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Rufus_Vanguard' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, FastMoveMotion) == 0x001140, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::FastMoveMotion' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, DN_DLinkStandby) == 0x001150, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::DN_DLinkStandby' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, AfterBurst) == 0x001151, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::AfterBurst' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, DmgSource_NoReaction_Normal) == 0x001158, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::DmgSource_NoReaction_Normal' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, DmgSource_NoReaction_HEAT) == 0x001168, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::DmgSource_NoReaction_HEAT' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, CombinationId) == 0x001178, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::CombinationId' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, HandleId) == 0x001180, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::HandleId' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, CauserChara) == 0x001188, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::CauserChara' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, HitCount_DodgeAtkPC) == 0x001190, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::HitCount_DodgeAtkPC' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, HitCount_DodgeAtk3PC) == 0x001194, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::HitCount_DodgeAtk3PC' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, HitCount_LongPressAtkPC) == 0x001198, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::HitCount_LongPressAtkPC' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, HitCount_LongPressAirAtkPC) == 0x00119C, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::HitCount_LongPressAirAtkPC' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, HitCount_AirAtk3PC) == 0x0011A0, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::HitCount_AirAtk3PC' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, HitCount_AirJChangePC) == 0x0011A4, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::HitCount_AirJChangePC' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, AtkCount_SAtkFirstPC) == 0x0011A8, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::AtkCount_SAtkFirstPC' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, AtkCount_SAtkLoopPC) == 0x0011AC, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::AtkCount_SAtkLoopPC' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, DmgSource_ImmidiateGuard) == 0x0011B0, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::DmgSource_ImmidiateGuard' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, ExtraInterval_FireBreak) == 0x0011C0, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::ExtraInterval_FireBreak' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, DmgSource_Cut50) == 0x0011C8, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::DmgSource_Cut50' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, ToComboReloadAbility_Tonfa) == 0x0011D8, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::ToComboReloadAbility_Tonfa' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, ToComboReloadAbility_NormalShot) == 0x0011E8, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::ToComboReloadAbility_NormalShot' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, ToComboReloadAbility_LaserCoin) == 0x0011F8, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::ToComboReloadAbility_LaserCoin' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, ToComboReloadAbility_Squat) == 0x001208, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::ToComboReloadAbility_Squat' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, HeatTime_UntilCounter) == 0x001218, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::HeatTime_UntilCounter' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, HEAT_EndSurpassTime) == 0x00121C, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::HEAT_EndSurpassTime' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, FastParry) == 0x00121D, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::FastParry' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, ToBackStepShotCombo) == 0x001220, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::ToBackStepShotCombo' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, SyncID_SurpassCounter) == 0x001230, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::SyncID_SurpassCounter' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, BPBonus_Parry) == 0x001240, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::BPBonus_Parry' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, Ability_FastCounter) == 0x001248, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::Ability_FastCounter' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, AtkCount_SAtkFinishPC) == 0x001258, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::AtkCount_SAtkFinishPC' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, GroundHeight) == 0x00125C, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::GroundHeight' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, HeightThreshold) == 0x001260, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::HeightThreshold' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, DN_Dead) == 0x001264, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::DN_Dead' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AIBP_C, ChainShot) == 0x001265, "Member 'AEB0016_00_Rufus_Standard_AIBP_C::ChainShot' has a wrong offset!");

}

