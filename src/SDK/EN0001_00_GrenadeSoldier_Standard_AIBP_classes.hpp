#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EN0001_00_GrenadeSoldier_Standard_AIBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EN_Base_AIBP_classes.hpp"
#include "EndGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass EN0001_00_GrenadeSoldier_Standard_AIBP.EN0001_00_GrenadeSoldier_Standard_AIBP_C
// 0x0060 (0x1000 - 0x0FA0)
class AEN0001_00_GrenadeSoldier_Standard_AIBP_C final : public AEN_Base_AIBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_EN0001_00_GrenadeSoldier_Standard_AIBP_C; // 0x0F98(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	int32                                         Variable_BulletsRequiredNum;                       // 0x0FA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ResidentParameter_MagazineCapacity;                // 0x0FA4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FAC[0x4];                                      // 0x0FAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UEndAIActionPackBase>> AIDefinition_ProwlMoveArray;                       // 0x0FB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         RemainingBullets;                                  // 0x0FC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RapidFire;                                         // 0x0FC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ExtraConditionResult;                              // 0x0FC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FC9[0x7];                                      // 0x0FC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UEndAIActionPackBase>> AIDefinition_LightAbilityArray;                    // 0x0FD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSubclassOf<class UEndAIActionPackBase>> AIDefinition_HardAbilityArray;                     // 0x0FE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   DamageSource_CrackerMine;                          // 0x0FF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void EN0001_Has_CrackerMine(bool* HasCrackerMine);
	void EN0001_Is_Using_CrackerMine(bool* UsingCrackerMine);
	void OnProwlInvoke(EEndAIProwlCallType CallType);
	void OnActionInvoke(EEndAIIntervalType IntervalType, class FName ExtraIntervalId);
	void ReceiveBeginPlay();
	void OnStartActionDefinitionInvoke(class FName ActionDefTag);
	void OnMotionMessageInvoke(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnMotionStateMessageUpdate(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue, float InProgress, bool LatestContactWall, bool LatestContact);
	void OnExtraConditionInvoke(class FName ConditionTag);
	void OnEndAbilityInvoke(class FName AbilityId, bool createdDamageSource, bool suspended, bool suspendedSummonCutScene);
	void OnUseAbilityInvoke(class FName AbilityId);
	void ExecuteUbergraph_EN0001_00_GrenadeSoldier_Standard_AIBP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EN0001_00_GrenadeSoldier_Standard_AIBP_C">();
	}
	static class AEN0001_00_GrenadeSoldier_Standard_AIBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEN0001_00_GrenadeSoldier_Standard_AIBP_C>();
	}
};
static_assert(alignof(AEN0001_00_GrenadeSoldier_Standard_AIBP_C) == 0x000010, "Wrong alignment on AEN0001_00_GrenadeSoldier_Standard_AIBP_C");
static_assert(sizeof(AEN0001_00_GrenadeSoldier_Standard_AIBP_C) == 0x001000, "Wrong size on AEN0001_00_GrenadeSoldier_Standard_AIBP_C");
static_assert(offsetof(AEN0001_00_GrenadeSoldier_Standard_AIBP_C, UberGraphFrame_EN0001_00_GrenadeSoldier_Standard_AIBP_C) == 0x000F98, "Member 'AEN0001_00_GrenadeSoldier_Standard_AIBP_C::UberGraphFrame_EN0001_00_GrenadeSoldier_Standard_AIBP_C' has a wrong offset!");
static_assert(offsetof(AEN0001_00_GrenadeSoldier_Standard_AIBP_C, Variable_BulletsRequiredNum) == 0x000FA0, "Member 'AEN0001_00_GrenadeSoldier_Standard_AIBP_C::Variable_BulletsRequiredNum' has a wrong offset!");
static_assert(offsetof(AEN0001_00_GrenadeSoldier_Standard_AIBP_C, ResidentParameter_MagazineCapacity) == 0x000FA4, "Member 'AEN0001_00_GrenadeSoldier_Standard_AIBP_C::ResidentParameter_MagazineCapacity' has a wrong offset!");
static_assert(offsetof(AEN0001_00_GrenadeSoldier_Standard_AIBP_C, AIDefinition_ProwlMoveArray) == 0x000FB0, "Member 'AEN0001_00_GrenadeSoldier_Standard_AIBP_C::AIDefinition_ProwlMoveArray' has a wrong offset!");
static_assert(offsetof(AEN0001_00_GrenadeSoldier_Standard_AIBP_C, RemainingBullets) == 0x000FC0, "Member 'AEN0001_00_GrenadeSoldier_Standard_AIBP_C::RemainingBullets' has a wrong offset!");
static_assert(offsetof(AEN0001_00_GrenadeSoldier_Standard_AIBP_C, RapidFire) == 0x000FC4, "Member 'AEN0001_00_GrenadeSoldier_Standard_AIBP_C::RapidFire' has a wrong offset!");
static_assert(offsetof(AEN0001_00_GrenadeSoldier_Standard_AIBP_C, ExtraConditionResult) == 0x000FC8, "Member 'AEN0001_00_GrenadeSoldier_Standard_AIBP_C::ExtraConditionResult' has a wrong offset!");
static_assert(offsetof(AEN0001_00_GrenadeSoldier_Standard_AIBP_C, AIDefinition_LightAbilityArray) == 0x000FD0, "Member 'AEN0001_00_GrenadeSoldier_Standard_AIBP_C::AIDefinition_LightAbilityArray' has a wrong offset!");
static_assert(offsetof(AEN0001_00_GrenadeSoldier_Standard_AIBP_C, AIDefinition_HardAbilityArray) == 0x000FE0, "Member 'AEN0001_00_GrenadeSoldier_Standard_AIBP_C::AIDefinition_HardAbilityArray' has a wrong offset!");
static_assert(offsetof(AEN0001_00_GrenadeSoldier_Standard_AIBP_C, DamageSource_CrackerMine) == 0x000FF0, "Member 'AEN0001_00_GrenadeSoldier_Standard_AIBP_C::DamageSource_CrackerMine' has a wrong offset!");

}

