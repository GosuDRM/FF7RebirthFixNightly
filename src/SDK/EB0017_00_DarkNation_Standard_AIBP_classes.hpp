#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EB0017_00_DarkNation_Standard_AIBP

#include "Basic.hpp"

#include "EndDataBase_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EB_Base_AIBP_classes.hpp"
#include "EndGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass EB0017_00_DarkNation_Standard_AIBP.EB0017_00_DarkNation_Standard_AIBP_C
// 0x0060 (0x10D0 - 0x1070)
class AEB0017_00_DarkNation_Standard_AIBP_C final : public AEB_Base_AIBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_EB0017_00_DarkNation_Standard_AIBP_C; // 0x1068(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	bool                                          _Debug_DebugKey_DarkNation;                        // 0x1070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RufusPursuit;                                      // 0x1071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Standby_Around;                                    // 0x1072(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DN_Vanguard;                                       // 0x1073(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DLink;                                             // 0x1074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1075[0x3];                                     // 0x1075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalDmg;                                          // 0x1078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DmgThreshold_TotalDmg;                             // 0x107C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalDmg_CallHelp;                                 // 0x1080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DmgThreshold_CallHelp;                             // 0x1084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LinkEnableDistance_RF;                             // 0x1088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_TargetMiddle;                             // 0x108C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           NoHelpAbility;                                     // 0x1090(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DisableReaction;                                   // 0x10A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShotMoveCombo;                                     // 0x10A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A2[0x2];                                     // 0x10A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DarkNation_Rotation;                               // 0x10A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                RufusWarpPoint_Grapple;                            // 0x10B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DirectionRevision_JumpBlow;                        // 0x10BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10BD[0x3];                                     // 0x10BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GroundHeight;                                      // 0x10C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DN_Dead;                                           // 0x10C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Jump_AfterDead_Done;                               // 0x10C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnAddStatusChangeID(class FName statusChangeID);
	void OnRemoveStatusChangeID(class FName statusChangeID);
	void OnAITimerInvoke(class FName ID);
	void OnGroupMessageInvoke(const struct FEndAIBattleGroupNotifyInfo& NotifyInfo);
	void OnAICombinationInvoke(EEndAIEnemyCombinationNotify NotifyType, class FName CombinationId, int32 Count);
	void OnEndAICombinationInvoke(class FName CombinationId);
	void OnTakeDamageInvoke(int32 Damage, class AEndCharacter* InChara, class FName InName, EEndBattleAbilityCommandType InCommandType, bool InBind, bool InGuard, class FName InBoneName, bool InAttributeWeak, class FName InDmgSrcID, EEndBattleAttributeType appendAttribute, float justHitRotYaw, const struct FVector& hitPosition, bool InHeal, bool InCounter, const struct FEndDataObjectBattleDamageSourceAccessor& dataObjectBattleDamageSource, bool useAbilityUCPC, const struct FEndDataObjectBattleAbilityAccessor& dataObjectBattleAbility);
	void OnStartBattleInvoke();
	void OnEndBattleInvoke();
	void OnDead(bool AtBurst);
	void ReceiveTick(float DeltaSeconds);
	void OnProwlInvoke(EEndAIProwlCallType CallType);
	void OnActionInvoke(EEndAIIntervalType IntervalType, class FName ExtraIntervalId);
	void AsyncCheckConditionInvoke();
	void OnActionTopPriorityInvoke(class FName TopPriorityActionId);
	void OnGiveDamageInvoke(int32 Damage, class AEndCharacter* InTarget, class FName InName, bool InBind, bool InGuard, bool KeepOver, bool InCounter, class FName InBoneName, bool InAttributeWeak, class FName InDamageSourceID, bool InSteal, bool heal, bool kill, bool justGuard, bool bLock);
	void ExecuteUbergraph_EB0017_00_DarkNation_Standard_AIBP(int32 EntryPoint);
	bool OnGetAbilityJumpLandLocation(struct FVector* OutLocation, class FName InBattleAbilityID);
	void InpActEvt_RightControl_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_Hyphen_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_Slash_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_Period_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_N_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_M_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Comma_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_L_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_End_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void OnExtraConditionInvoke(class FName ConditionTag);
	void OnDefinitionLockTargetInvoke(class FName LockTargetTag);
	void OnMotionMessageInvoke(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnStartActionDefinitionInvoke(class FName ActionDefTag);
	void OnEndActionDefinitionInvoke(class FName ActionDefTag, class FName SuspendAbilityId, bool bSuspendSummonCutScene);
	void OnEndAbilityInvoke(class FName AbilityId, bool createdDamageSource, bool suspended, bool suspendedSummonCutScene);
	void OnBeginBreak(class AEndCharacter* causerCharacter);
	void OnMotionStateMessageBegin(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue, float InTotalDuration);
	void OnMotionStateMessageEnd(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnBeginBurst();
	void OnUseAbilityInvoke(class FName AbilityId);
	void OnEndBurst(bool instant);
	void OnEndBreak();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EB0017_00_DarkNation_Standard_AIBP_C">();
	}
	static class AEB0017_00_DarkNation_Standard_AIBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEB0017_00_DarkNation_Standard_AIBP_C>();
	}
};
static_assert(alignof(AEB0017_00_DarkNation_Standard_AIBP_C) == 0x000010, "Wrong alignment on AEB0017_00_DarkNation_Standard_AIBP_C");
static_assert(sizeof(AEB0017_00_DarkNation_Standard_AIBP_C) == 0x0010D0, "Wrong size on AEB0017_00_DarkNation_Standard_AIBP_C");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, UberGraphFrame_EB0017_00_DarkNation_Standard_AIBP_C) == 0x001068, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::UberGraphFrame_EB0017_00_DarkNation_Standard_AIBP_C' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, _Debug_DebugKey_DarkNation) == 0x001070, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::_Debug_DebugKey_DarkNation' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, RufusPursuit) == 0x001071, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::RufusPursuit' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, Standby_Around) == 0x001072, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::Standby_Around' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, DN_Vanguard) == 0x001073, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::DN_Vanguard' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, DLink) == 0x001074, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::DLink' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, TotalDmg) == 0x001078, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::TotalDmg' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, DmgThreshold_TotalDmg) == 0x00107C, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::DmgThreshold_TotalDmg' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, TotalDmg_CallHelp) == 0x001080, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::TotalDmg_CallHelp' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, DmgThreshold_CallHelp) == 0x001084, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::DmgThreshold_CallHelp' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, LinkEnableDistance_RF) == 0x001088, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::LinkEnableDistance_RF' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, Distance_TargetMiddle) == 0x00108C, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::Distance_TargetMiddle' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, NoHelpAbility) == 0x001090, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::NoHelpAbility' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, DisableReaction) == 0x0010A0, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::DisableReaction' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, ShotMoveCombo) == 0x0010A1, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::ShotMoveCombo' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, DarkNation_Rotation) == 0x0010A4, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::DarkNation_Rotation' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, RufusWarpPoint_Grapple) == 0x0010B0, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::RufusWarpPoint_Grapple' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, DirectionRevision_JumpBlow) == 0x0010BC, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::DirectionRevision_JumpBlow' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, GroundHeight) == 0x0010C0, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::GroundHeight' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, DN_Dead) == 0x0010C4, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::DN_Dead' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AIBP_C, Jump_AfterDead_Done) == 0x0010C5, "Member 'AEB0017_00_DarkNation_Standard_AIBP_C::Jump_AfterDead_Done' has a wrong offset!");

}

