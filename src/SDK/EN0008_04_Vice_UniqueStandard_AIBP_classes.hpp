#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EN0008_04_Vice_UniqueStandard_AIBP

#include "Basic.hpp"

#include "EndDataBase_structs.hpp"
#include "Engine_structs.hpp"
#include "EN_Base_AIBP_classes.hpp"
#include "EndGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass EN0008_04_Vice_UniqueStandard_AIBP.EN0008_04_Vice_UniqueStandard_AIBP_C
// 0x0040 (0x0FE0 - 0x0FA0)
#pragma pack(push, 0x1)
class alignas(0x10) AEN0008_04_Vice_UniqueStandard_AIBP_C : public AEN_Base_AIBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_EN0008_04_Vice_UniqueStandard_AIBP_C; // 0x0F98(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	TSubclassOf<class UEndAIMoveDefinition>       AIDefinition_Around;                               // 0x0FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UEndAIMoveDefinition>       AIDefinition_ConfrontOnly;                         // 0x0FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UEndAIMoveDefinition>       AIDefinition_ConfrontToAction;                     // 0x0FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UEndAIActionPackBase>       AIDefinition_LightAbility;                         // 0x0FB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UEndAIActionDefinitionBase> AIDefinition_HardAbility;                          // 0x0FC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          angry;                                             // 0x0FC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasTrap;                                           // 0x0FC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FCA[0x2];                                      // 0x0FCA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrapCounter;                                       // 0x0FCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasTrapCheck;                                      // 0x0FD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SettingTrap;                                       // 0x0FD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_EN0008_04_Vice_UniqueStandard_AIBP(int32 EntryPoint);
	void OnTakeDamageInvoke(int32 Damage, class AEndCharacter* InChara, class FName InName, EEndBattleAbilityCommandType InCommandType, bool InBind, bool InGuard, class FName InBoneName, bool InAttributeWeak, class FName InDmgSrcID, EEndBattleAttributeType appendAttribute, float justHitRotYaw, const struct FVector& hitPosition, bool InHeal, bool InCounter, const struct FEndDataObjectBattleDamageSourceAccessor& dataObjectBattleDamageSource, bool useAbilityUCPC, const struct FEndDataObjectBattleAbilityAccessor& dataObjectBattleAbility);
	void OnMotionStateMessageEnd(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnMotionStateMessageBegin(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue, float InTotalDuration);
	void OnDead(bool AtBurst);
	void OnEndBattleInvoke();
	void OnStartBattleInvoke();
	void OnGroupMessageInvoke(const struct FEndAIBattleGroupNotifyInfo& NotifyInfo);
	void SearchTrap();
	void OnActionInvoke(EEndAIIntervalType IntervalType, class FName ExtraIntervalId);
	void OnProwlInvoke(EEndAIProwlCallType CallType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EN0008_04_Vice_UniqueStandard_AIBP_C">();
	}
	static class AEN0008_04_Vice_UniqueStandard_AIBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEN0008_04_Vice_UniqueStandard_AIBP_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AEN0008_04_Vice_UniqueStandard_AIBP_C) == 0x000010, "Wrong alignment on AEN0008_04_Vice_UniqueStandard_AIBP_C");
static_assert(sizeof(AEN0008_04_Vice_UniqueStandard_AIBP_C) == 0x000FE0, "Wrong size on AEN0008_04_Vice_UniqueStandard_AIBP_C");
static_assert(offsetof(AEN0008_04_Vice_UniqueStandard_AIBP_C, UberGraphFrame_EN0008_04_Vice_UniqueStandard_AIBP_C) == 0x000F98, "Member 'AEN0008_04_Vice_UniqueStandard_AIBP_C::UberGraphFrame_EN0008_04_Vice_UniqueStandard_AIBP_C' has a wrong offset!");
static_assert(offsetof(AEN0008_04_Vice_UniqueStandard_AIBP_C, AIDefinition_Around) == 0x000FA0, "Member 'AEN0008_04_Vice_UniqueStandard_AIBP_C::AIDefinition_Around' has a wrong offset!");
static_assert(offsetof(AEN0008_04_Vice_UniqueStandard_AIBP_C, AIDefinition_ConfrontOnly) == 0x000FA8, "Member 'AEN0008_04_Vice_UniqueStandard_AIBP_C::AIDefinition_ConfrontOnly' has a wrong offset!");
static_assert(offsetof(AEN0008_04_Vice_UniqueStandard_AIBP_C, AIDefinition_ConfrontToAction) == 0x000FB0, "Member 'AEN0008_04_Vice_UniqueStandard_AIBP_C::AIDefinition_ConfrontToAction' has a wrong offset!");
static_assert(offsetof(AEN0008_04_Vice_UniqueStandard_AIBP_C, AIDefinition_LightAbility) == 0x000FB8, "Member 'AEN0008_04_Vice_UniqueStandard_AIBP_C::AIDefinition_LightAbility' has a wrong offset!");
static_assert(offsetof(AEN0008_04_Vice_UniqueStandard_AIBP_C, AIDefinition_HardAbility) == 0x000FC0, "Member 'AEN0008_04_Vice_UniqueStandard_AIBP_C::AIDefinition_HardAbility' has a wrong offset!");
static_assert(offsetof(AEN0008_04_Vice_UniqueStandard_AIBP_C, angry) == 0x000FC8, "Member 'AEN0008_04_Vice_UniqueStandard_AIBP_C::angry' has a wrong offset!");
static_assert(offsetof(AEN0008_04_Vice_UniqueStandard_AIBP_C, HasTrap) == 0x000FC9, "Member 'AEN0008_04_Vice_UniqueStandard_AIBP_C::HasTrap' has a wrong offset!");
static_assert(offsetof(AEN0008_04_Vice_UniqueStandard_AIBP_C, TrapCounter) == 0x000FCC, "Member 'AEN0008_04_Vice_UniqueStandard_AIBP_C::TrapCounter' has a wrong offset!");
static_assert(offsetof(AEN0008_04_Vice_UniqueStandard_AIBP_C, HasTrapCheck) == 0x000FD0, "Member 'AEN0008_04_Vice_UniqueStandard_AIBP_C::HasTrapCheck' has a wrong offset!");
static_assert(offsetof(AEN0008_04_Vice_UniqueStandard_AIBP_C, SettingTrap) == 0x000FD1, "Member 'AEN0008_04_Vice_UniqueStandard_AIBP_C::SettingTrap' has a wrong offset!");

}

