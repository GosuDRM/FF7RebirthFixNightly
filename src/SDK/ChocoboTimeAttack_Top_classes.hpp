#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChocoboTimeAttack_Top

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ChocoboTimeAttack_Top.ChocoboTimeAttack_Top_C
// 0x0048 (0x0410 - 0x03C8)
class UChocoboTimeAttack_Top_C final : public UEndUserWidget
{
public:
	class UWidgetAnimation*                       Menu_Out;                                          // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Menu_In;                                           // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UChocoboTimeAttack_BestTime_C*          BestTime;                                          // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_CheckPoint_C*        CheckPoint;                                        // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMiniGame_Com_CountDown_C*              CountDown2;                                        // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_FlagTimeList_C*      FlagTimeList;                                      // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMiniGame_Com_Result_C*                 ResultWindow;                                      // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChocoboTimeAttack_Score2_C*            Score;                                             // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTimer_C*                               Timer;                                             // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ChocoboTimeAttack_Top_C">();
	}
	static class UChocoboTimeAttack_Top_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChocoboTimeAttack_Top_C>();
	}
};
static_assert(alignof(UChocoboTimeAttack_Top_C) == 0x000008, "Wrong alignment on UChocoboTimeAttack_Top_C");
static_assert(sizeof(UChocoboTimeAttack_Top_C) == 0x000410, "Wrong size on UChocoboTimeAttack_Top_C");
static_assert(offsetof(UChocoboTimeAttack_Top_C, Menu_Out) == 0x0003C8, "Member 'UChocoboTimeAttack_Top_C::Menu_Out' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_Top_C, Menu_In) == 0x0003D0, "Member 'UChocoboTimeAttack_Top_C::Menu_In' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_Top_C, BestTime) == 0x0003D8, "Member 'UChocoboTimeAttack_Top_C::BestTime' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_Top_C, CheckPoint) == 0x0003E0, "Member 'UChocoboTimeAttack_Top_C::CheckPoint' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_Top_C, CountDown2) == 0x0003E8, "Member 'UChocoboTimeAttack_Top_C::CountDown2' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_Top_C, FlagTimeList) == 0x0003F0, "Member 'UChocoboTimeAttack_Top_C::FlagTimeList' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_Top_C, ResultWindow) == 0x0003F8, "Member 'UChocoboTimeAttack_Top_C::ResultWindow' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_Top_C, Score) == 0x000400, "Member 'UChocoboTimeAttack_Top_C::Score' has a wrong offset!");
static_assert(offsetof(UChocoboTimeAttack_Top_C, Timer) == 0x000408, "Member 'UChocoboTimeAttack_Top_C::Timer' has a wrong offset!");

}

